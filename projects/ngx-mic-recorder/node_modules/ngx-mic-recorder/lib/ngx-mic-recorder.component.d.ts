import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { NgxMicRecorderService } from './ngx-mic-recorder.service';
import { AudioVisualizationOptions, AudioVisualizationType } from './utils/audio-visualizer';
import * as i0 from "@angular/core";
declare type StartStopTemplateContext = {
    $implicit: boolean;
    toggle: Function;
    start: Function;
    stop: Function;
};
declare type PauseResumeTemplateContext = {
    $implicit: boolean;
    isPaused: boolean;
    toggle: Function;
    resume: Function;
    pause: Function;
    recordingState: RecordingState;
    recordingTime: string;
};
export declare class NgxMicStartStopTemplate {
    templateRef: TemplateRef<StartStopTemplateContext>;
    constructor(templateRef: TemplateRef<StartStopTemplateContext>);
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxMicStartStopTemplate, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgxMicStartStopTemplate, "[ngx-mic-start-and-stop]", never, {}, {}, never>;
}
export declare class NgxPauseResumeTemplate {
    templateRef: TemplateRef<PauseResumeTemplateContext>;
    constructor(templateRef: TemplateRef<PauseResumeTemplateContext>);
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxPauseResumeTemplate, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgxPauseResumeTemplate, "[ngx-mic-pause-and-resume]", never, {}, {}, never>;
}
export declare class NgxMicRecorderComponent implements OnInit, AfterViewInit, OnDestroy {
    ngxMicRecorderService: NgxMicRecorderService;
    canvas: ElementRef<HTMLCanvasElement>;
    startStopTemplateRef?: NgxMicStartStopTemplate;
    pauseResumeTemplateRef?: NgxPauseResumeTemplate;
    showVisualization: boolean;
    visualizationType?: AudioVisualizationType;
    visualizationOptions?: Omit<AudioVisualizationOptions, 'canvas'>;
    getAsMp3: EventEmitter<{
        data: Blob;
        url: string;
    }>;
    getAsBlob: EventEmitter<Blob>;
    afterStartRecording: EventEmitter<void>;
    afterStopRecording: EventEmitter<Blob>;
    onPauseRecording: EventEmitter<void>;
    onResumeRecording: EventEmitter<void>;
    private _subscription?;
    constructor(ngxMicRecorderService: NgxMicRecorderService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    getStartStopTemplateContext($implicit: boolean): StartStopTemplateContext;
    getPauseResumeTemplateContext($implicit: boolean, isPaused: boolean, recordingTime: string, recordingState: RecordingState): PauseResumeTemplateContext;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxMicRecorderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgxMicRecorderComponent, "ngx-mic-recorder", never, { "showVisualization": "showVisualization"; "visualizationType": "visualizationType"; "visualizationOptions": "visualizationOptions"; }, { "getAsMp3": "getAsMp3"; "getAsBlob": "getAsBlob"; "afterStartRecording": "afterStartRecording"; "afterStopRecording": "afterStopRecording"; "onPauseRecording": "onPauseRecording"; "onResumeRecording": "onResumeRecording"; }, ["startStopTemplateRef", "pauseResumeTemplateRef"], never>;
}
export {};
