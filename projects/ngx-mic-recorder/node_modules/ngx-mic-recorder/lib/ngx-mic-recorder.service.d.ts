import * as i0 from "@angular/core";
export interface RecordingEvents {
    afterStartRecording: () => void;
    afterStopRecording: (blob: Blob) => void;
    onPause: () => void;
    onResume: () => void;
}
export declare class NgxMicRecorderService {
    private _isRecordingSubject;
    private _isPausedSubject;
    private _recordingTimeSubject;
    private _recordedBlobSubject;
    private _recordingStateSubject;
    private _timeInterval?;
    private _audioContext;
    private _mic?;
    private _processor?;
    private _activeStream?;
    private _mp3Encoder;
    private _mediaRecorder?;
    private _recordingEvents?;
    isRecording$: import("rxjs").Observable<boolean>;
    isPaused$: import("rxjs").Observable<boolean>;
    recordingTime$: import("rxjs").Observable<string>;
    recordedBlob$: import("rxjs").Observable<Blob | null>;
    recordedBlobAsMp3$: import("rxjs").Observable<Blob>;
    recordingState$: import("rxjs").Observable<RecordingState>;
    private _startTimer;
    private _stopTimer;
    private _getMp3;
    setRecordingEvents(events: Partial<RecordingEvents>): void;
    toggleStartStop: () => void;
    startRecording: () => void;
    stopRecording: () => void;
    togglePauseAndResume: () => void;
    resume: () => void;
    pause: () => void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxMicRecorderService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NgxMicRecorderService>;
}
