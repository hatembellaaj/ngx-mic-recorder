// @ts-ignore
import { Mp3Encoder } from 'lamejstmp';
export class MP3Encoder {
    constructor(config) {
        this.dataBuffer = [];
        this.config = {
            sampleRate: 44100,
            bitRate: 128,
        };
        Object.assign(this.config, config);
        this.mp3Encoder = new Mp3Encoder(1, this.config.sampleRate, this.config.bitRate);
        this.maxSamples = 1152;
        this.samplesMono = null;
        this.clearBuffer();
    }
    clearBuffer() {
        this.dataBuffer = [];
    }
    appendToBuffer(buffer) {
        this.dataBuffer.push(new Int8Array(buffer));
    }
    floatTo16BitPCM(input, output) {
        for (let i = 0; i < input.length; i++) {
            const s = Math.max(-1, Math.min(1, input[i]));
            output[i] = s < 0 ? s * 0x8000 : s * 0x7fff;
        }
    }
    convertBuffer(arrayBuffer) {
        const data = new Float32Array(arrayBuffer);
        const out = new Int16Array(arrayBuffer.length);
        this.floatTo16BitPCM(data, out);
        return out;
    }
    encode(arrayBuffer) {
        this.samplesMono = this.convertBuffer(arrayBuffer);
        let remaining = this.samplesMono.length;
        for (let i = 0; remaining >= 0; i += this.maxSamples) {
            const left = this.samplesMono.subarray(i, i + this.maxSamples);
            const mp3buffer = this.mp3Encoder.encodeBuffer(left);
            this.appendToBuffer(mp3buffer);
            remaining -= this.maxSamples;
        }
    }
    finish() {
        this.appendToBuffer(this.mp3Encoder.flush());
        return this.dataBuffer;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXAzLWVuY29kZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbWljLXJlY29yZGVyL3NyYy9saWIvdXRpbHMvbXAzLWVuY29kZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsYUFBYTtBQUNiLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFPdkMsTUFBTSxPQUFPLFVBQVU7SUFPckIsWUFBWSxNQUFlO1FBRjNCLGVBQVUsR0FBZ0IsRUFBRSxDQUFDO1FBRzNCLElBQUksQ0FBQyxNQUFNLEdBQUc7WUFDWixVQUFVLEVBQUUsS0FBSztZQUNqQixPQUFPLEVBQUUsR0FBRztTQUNiLENBQUM7UUFFRixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFbkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FDOUIsQ0FBQyxFQUNELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUN0QixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FDcEIsQ0FBQztRQUVGLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBRXZCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxjQUFjLENBQUMsTUFBd0I7UUFDckMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsZUFBZSxDQUFDLEtBQW1CLEVBQUUsTUFBa0I7UUFDckQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDckMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1NBQzdDO0lBQ0gsQ0FBQztJQUVELGFBQWEsQ0FBQyxXQUF5QjtRQUNyQyxNQUFNLElBQUksR0FBRyxJQUFJLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMzQyxNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFaEMsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQXlCO1FBQzlCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNuRCxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUV4QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxTQUFTLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3BELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQy9ELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JELElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDL0IsU0FBUyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUM7U0FDOUI7SUFDSCxDQUFDO0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRTdDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAdHMtaWdub3JlXHJcbmltcG9ydCB7IE1wM0VuY29kZXIgfSBmcm9tICdsYW1lanN0bXAnO1xyXG5cclxuaW50ZXJmYWNlIENvbmZpZyB7XHJcbiAgYml0UmF0ZTogbnVtYmVyO1xyXG4gIHNhbXBsZVJhdGU6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE1QM0VuY29kZXIge1xyXG4gIGNvbmZpZzogQ29uZmlnO1xyXG4gIG1wM0VuY29kZXI6IE1wM0VuY29kZXI7XHJcbiAgbWF4U2FtcGxlczogbnVtYmVyO1xyXG4gIHNhbXBsZXNNb25vOiAgSW50MTZBcnJheSB8IG51bGw7XHJcbiAgZGF0YUJ1ZmZlcjogSW50OEFycmF5W10gPSBbXTtcclxuXHJcbiAgY29uc3RydWN0b3IoY29uZmlnPzogQ29uZmlnKSB7XHJcbiAgICB0aGlzLmNvbmZpZyA9IHtcclxuICAgICAgc2FtcGxlUmF0ZTogNDQxMDAsXHJcbiAgICAgIGJpdFJhdGU6IDEyOCxcclxuICAgIH07XHJcblxyXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLmNvbmZpZywgY29uZmlnKTtcclxuXHJcbiAgICB0aGlzLm1wM0VuY29kZXIgPSBuZXcgTXAzRW5jb2RlcihcclxuICAgICAgMSxcclxuICAgICAgdGhpcy5jb25maWcuc2FtcGxlUmF0ZSxcclxuICAgICAgdGhpcy5jb25maWcuYml0UmF0ZVxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLm1heFNhbXBsZXMgPSAxMTUyO1xyXG5cclxuICAgIHRoaXMuc2FtcGxlc01vbm8gPSBudWxsO1xyXG4gICAgdGhpcy5jbGVhckJ1ZmZlcigpO1xyXG4gIH1cclxuXHJcbiAgY2xlYXJCdWZmZXIoKSB7XHJcbiAgICB0aGlzLmRhdGFCdWZmZXIgPSBbXTtcclxuICB9XHJcblxyXG4gIGFwcGVuZFRvQnVmZmVyKGJ1ZmZlcjogSXRlcmFibGU8bnVtYmVyPikge1xyXG4gICAgdGhpcy5kYXRhQnVmZmVyLnB1c2gobmV3IEludDhBcnJheShidWZmZXIpKTtcclxuICB9XHJcblxyXG4gIGZsb2F0VG8xNkJpdFBDTShpbnB1dDogRmxvYXQzMkFycmF5LCBvdXRwdXQ6IEludDE2QXJyYXkpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3QgcyA9IE1hdGgubWF4KC0xLCBNYXRoLm1pbigxLCBpbnB1dFtpXSkpO1xyXG4gICAgICBvdXRwdXRbaV0gPSBzIDwgMCA/IHMgKiAweDgwMDAgOiBzICogMHg3ZmZmO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29udmVydEJ1ZmZlcihhcnJheUJ1ZmZlcjogRmxvYXQzMkFycmF5KSB7XHJcbiAgICBjb25zdCBkYXRhID0gbmV3IEZsb2F0MzJBcnJheShhcnJheUJ1ZmZlcik7XHJcbiAgICBjb25zdCBvdXQgPSBuZXcgSW50MTZBcnJheShhcnJheUJ1ZmZlci5sZW5ndGgpO1xyXG4gICAgdGhpcy5mbG9hdFRvMTZCaXRQQ00oZGF0YSwgb3V0KTtcclxuXHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxuXHJcbiAgZW5jb2RlKGFycmF5QnVmZmVyOiBGbG9hdDMyQXJyYXkpIHtcclxuICAgIHRoaXMuc2FtcGxlc01vbm8gPSB0aGlzLmNvbnZlcnRCdWZmZXIoYXJyYXlCdWZmZXIpO1xyXG4gICAgbGV0IHJlbWFpbmluZyA9IHRoaXMuc2FtcGxlc01vbm8ubGVuZ3RoO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyByZW1haW5pbmcgPj0gMDsgaSArPSB0aGlzLm1heFNhbXBsZXMpIHtcclxuICAgICAgY29uc3QgbGVmdCA9IHRoaXMuc2FtcGxlc01vbm8uc3ViYXJyYXkoaSwgaSArIHRoaXMubWF4U2FtcGxlcyk7XHJcbiAgICAgIGNvbnN0IG1wM2J1ZmZlciA9IHRoaXMubXAzRW5jb2Rlci5lbmNvZGVCdWZmZXIobGVmdCk7XHJcbiAgICAgIHRoaXMuYXBwZW5kVG9CdWZmZXIobXAzYnVmZmVyKTtcclxuICAgICAgcmVtYWluaW5nIC09IHRoaXMubWF4U2FtcGxlcztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZpbmlzaCgpIHtcclxuICAgIHRoaXMuYXBwZW5kVG9CdWZmZXIodGhpcy5tcDNFbmNvZGVyLmZsdXNoKCkpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLmRhdGFCdWZmZXI7XHJcbiAgfVxyXG59XHJcbiJdfQ==