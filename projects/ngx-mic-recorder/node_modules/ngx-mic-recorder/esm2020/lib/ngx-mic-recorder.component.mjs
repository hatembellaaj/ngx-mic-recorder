import { Component, ContentChild, Directive, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { AudioVisualizer } from './utils/audio-visualizer';
import * as i0 from "@angular/core";
import * as i1 from "./ngx-mic-recorder.service";
import * as i2 from "@angular/common";
export class NgxMicStartStopTemplate {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
NgxMicStartStopTemplate.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: NgxMicStartStopTemplate, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
NgxMicStartStopTemplate.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.7", type: NgxMicStartStopTemplate, selector: "[ngx-mic-start-and-stop]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: NgxMicStartStopTemplate, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngx-mic-start-and-stop]'
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
export class NgxPauseResumeTemplate {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
NgxPauseResumeTemplate.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: NgxPauseResumeTemplate, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
NgxPauseResumeTemplate.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.7", type: NgxPauseResumeTemplate, selector: "[ngx-mic-pause-and-resume]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: NgxPauseResumeTemplate, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngx-mic-pause-and-resume]'
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
export class NgxMicRecorderComponent {
    constructor(ngxMicRecorderService) {
        this.ngxMicRecorderService = ngxMicRecorderService;
        this.showVisualization = true;
        this.getAsMp3 = new EventEmitter();
        this.getAsBlob = new EventEmitter();
        this.afterStartRecording = new EventEmitter();
        this.afterStopRecording = new EventEmitter();
        this.onPauseRecording = new EventEmitter();
        this.onResumeRecording = new EventEmitter();
    }
    ngOnInit() {
        this._subscription = this.ngxMicRecorderService.recordedBlobAsMp3$.subscribe((data) => {
            this.getAsMp3.emit({ data, url: URL.createObjectURL(data) });
        });
        this._subscription.add(this.ngxMicRecorderService.recordedBlob$.subscribe((data) => this.getAsBlob.emit(data)));
        this.ngxMicRecorderService.setRecordingEvents({
            afterStartRecording: () => this.afterStartRecording.emit(),
            afterStopRecording: (blob) => this.afterStopRecording.emit(blob),
            onPause: () => this.onPauseRecording.emit(),
            onResume: () => this.onResumeRecording.emit(),
        });
    }
    ngAfterViewInit() {
        AudioVisualizer.visualize(this.visualizationType, {
            canvas: this.canvas.nativeElement,
            ...this.visualizationOptions
        });
    }
    ngOnDestroy() {
        this._subscription?.unsubscribe();
    }
    getStartStopTemplateContext($implicit) {
        return {
            $implicit,
            toggle: this.ngxMicRecorderService.toggleStartStop,
            start: this.ngxMicRecorderService.startRecording,
            stop: this.ngxMicRecorderService.stopRecording
        };
    }
    getPauseResumeTemplateContext($implicit, isPaused, recordingTime, recordingState) {
        return {
            $implicit,
            isPaused,
            recordingState,
            recordingTime,
            toggle: this.ngxMicRecorderService.togglePauseAndResume,
            pause: this.ngxMicRecorderService.pause,
            resume: this.ngxMicRecorderService.resume
        };
    }
}
NgxMicRecorderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: NgxMicRecorderComponent, deps: [{ token: i1.NgxMicRecorderService }], target: i0.ɵɵFactoryTarget.Component });
NgxMicRecorderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.7", type: NgxMicRecorderComponent, selector: "ngx-mic-recorder", inputs: { showVisualization: "showVisualization", visualizationType: "visualizationType", visualizationOptions: "visualizationOptions" }, outputs: { getAsMp3: "getAsMp3", getAsBlob: "getAsBlob", afterStartRecording: "afterStartRecording", afterStopRecording: "afterStopRecording", onPauseRecording: "onPauseRecording", onResumeRecording: "onResumeRecording" }, queries: [{ propertyName: "startStopTemplateRef", first: true, predicate: NgxMicStartStopTemplate, descendants: true }, { propertyName: "pauseResumeTemplateRef", first: true, predicate: NgxPauseResumeTemplate, descendants: true }], viewQueries: [{ propertyName: "canvas", first: true, predicate: ["canvas"], descendants: true }], ngImport: i0, template: "<div class=\"ngx-mic-recorder\">\r\n  <ng-template\r\n    [ngTemplateOutlet]=\"startStopTemplateRef?.templateRef || defaultStartStopTemplate\"\r\n    [ngTemplateOutletContext]=\"getStartStopTemplateContext((ngxMicRecorderService.isRecording$ | async) ?? false)\"\r\n\r\n  ></ng-template>\r\n  <ng-template\r\n    [ngTemplateOutlet]=\"pauseResumeTemplateRef?.templateRef || defaultPauseAndResume\"\r\n    [ngTemplateOutletContext]=\"getPauseResumeTemplateContext(\r\n     (ngxMicRecorderService.isRecording$ | async) ?? false,\r\n     (ngxMicRecorderService.isPaused$ | async) ?? false,\r\n     (ngxMicRecorderService.recordingTime$ | async) ?? '00:00:00',\r\n     (ngxMicRecorderService.recordingState$ | async) ?? 'inactive'\r\n    )\"\r\n\r\n  ></ng-template>\r\n</div>\r\n\r\n<canvas *ngIf=\"showVisualization\" #canvas [class.hidden]=\"!(ngxMicRecorderService.isRecording$ | async)\"></canvas>\r\n\r\n\r\n<ng-template #defaultStartStopTemplate let-isRecording let-toggle=\"toggle\">\r\n  <div class=\"ngx-mic-recorder__start-stop\" (click)=\"toggle()\">\r\n    <div class=\"ngx-mic-recorder__state\">\r\n      <span *ngIf=\"isRecording\" class=\"ngx-mic-recorder__stop\"></span>\r\n      <svg *ngIf=\"!isRecording\" class=\"ngx-mic-recorder__start\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" aria-hidden=\"true\"\r\n           id=\"footer-sample-full\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 24 24\">\r\n        <path fill=\"currentColor\" d=\"M12 14q-1.25 0-2.125-.875T9 11V5q0-1.25.875-2.125T12 2q1.25 0 2.125.875T15 5v6q0 1.25-.875 2.125T12 14Zm-1 7v-3.075q-2.6-.35-4.3-2.325Q5 13.625 5 11h2q0 2.075 1.463 3.537Q9.925 16 12 16t3.538-1.463Q17 13.075 17 11h2q0 2.625-1.7 4.6q-1.7 1.975-4.3 2.325V21Z\"></path>\r\n      </svg>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template\r\n  #defaultPauseAndResume\r\n  let-isRecording\r\n  let-toggle=\"toggle\"\r\n  let-recordingTime=\"recordingTime\"\r\n  let-isPaused=\"isPaused\"\r\n  let-recordingState=\"recordingState\"\r\n>\r\n  <ng-template [ngIf]=\"isRecording\">\r\n    <div class=\"ngx-mic-recorder__recording-time\">\r\n      {{ recordingTime }}\r\n    </div>\r\n    <div class=\"ngx-mic-recorder__toggle\" (click)=\"toggle()\">\r\n      <span [class.blink]=\"!isPaused\"></span>\r\n      <p>{{ recordingState }}</p>\r\n    </div>\r\n  </ng-template>\r\n</ng-template>\r\n", styles: ["ngx-mic-recorder{width:400px;display:block}ngx-mic-recorder>*{box-sizing:border-box}ngx-mic-recorder>canvas{width:100%}.ngx-mic-recorder{display:flex;align-items:center;justify-content:space-between}.ngx-mic-recorder__recording-time{color:#282828;font-size:24px;font-weight:700}.ngx-mic-recorder__state{width:24px;height:24px}.ngx-mic-recorder__start-stop{padding:16px;background-color:#282828;border-radius:50px;border:4px solid #CFCFCF;cursor:pointer}.ngx-mic-recorder__start-stop .ngx-mic-recorder__stop{background-color:#cfcfcf;border-radius:4px;width:100%;height:100%;display:block}.ngx-mic-recorder__start-stop .ngx-mic-recorder__start{color:#cfcfcf;width:100%;height:100%}.ngx-mic-recorder__toggle{padding:16px 48px;background-color:#282828;border-radius:50px;border:4px solid #CFCFCF;cursor:pointer;color:#cfcfcf;display:flex;align-items:center}.ngx-mic-recorder__toggle>span{background-color:#d40100;border-radius:50%;width:24px;height:24px;display:block;margin-inline-end:8px}.ngx-mic-recorder__toggle>p{margin:0;width:60px;text-transform:capitalize}.hidden{visibility:hidden}.blink{animation-name:blink;animation-duration:1s;animation-iteration-count:infinite}@keyframes blink{0%{opacity:1}50%{opacity:.3}to{opacity:1}}\n"], directives: [{ type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i2.AsyncPipe }, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: NgxMicRecorderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-mic-recorder', encapsulation: ViewEncapsulation.None, template: "<div class=\"ngx-mic-recorder\">\r\n  <ng-template\r\n    [ngTemplateOutlet]=\"startStopTemplateRef?.templateRef || defaultStartStopTemplate\"\r\n    [ngTemplateOutletContext]=\"getStartStopTemplateContext((ngxMicRecorderService.isRecording$ | async) ?? false)\"\r\n\r\n  ></ng-template>\r\n  <ng-template\r\n    [ngTemplateOutlet]=\"pauseResumeTemplateRef?.templateRef || defaultPauseAndResume\"\r\n    [ngTemplateOutletContext]=\"getPauseResumeTemplateContext(\r\n     (ngxMicRecorderService.isRecording$ | async) ?? false,\r\n     (ngxMicRecorderService.isPaused$ | async) ?? false,\r\n     (ngxMicRecorderService.recordingTime$ | async) ?? '00:00:00',\r\n     (ngxMicRecorderService.recordingState$ | async) ?? 'inactive'\r\n    )\"\r\n\r\n  ></ng-template>\r\n</div>\r\n\r\n<canvas *ngIf=\"showVisualization\" #canvas [class.hidden]=\"!(ngxMicRecorderService.isRecording$ | async)\"></canvas>\r\n\r\n\r\n<ng-template #defaultStartStopTemplate let-isRecording let-toggle=\"toggle\">\r\n  <div class=\"ngx-mic-recorder__start-stop\" (click)=\"toggle()\">\r\n    <div class=\"ngx-mic-recorder__state\">\r\n      <span *ngIf=\"isRecording\" class=\"ngx-mic-recorder__stop\"></span>\r\n      <svg *ngIf=\"!isRecording\" class=\"ngx-mic-recorder__start\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" aria-hidden=\"true\"\r\n           id=\"footer-sample-full\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 24 24\">\r\n        <path fill=\"currentColor\" d=\"M12 14q-1.25 0-2.125-.875T9 11V5q0-1.25.875-2.125T12 2q1.25 0 2.125.875T15 5v6q0 1.25-.875 2.125T12 14Zm-1 7v-3.075q-2.6-.35-4.3-2.325Q5 13.625 5 11h2q0 2.075 1.463 3.537Q9.925 16 12 16t3.538-1.463Q17 13.075 17 11h2q0 2.625-1.7 4.6q-1.7 1.975-4.3 2.325V21Z\"></path>\r\n      </svg>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template\r\n  #defaultPauseAndResume\r\n  let-isRecording\r\n  let-toggle=\"toggle\"\r\n  let-recordingTime=\"recordingTime\"\r\n  let-isPaused=\"isPaused\"\r\n  let-recordingState=\"recordingState\"\r\n>\r\n  <ng-template [ngIf]=\"isRecording\">\r\n    <div class=\"ngx-mic-recorder__recording-time\">\r\n      {{ recordingTime }}\r\n    </div>\r\n    <div class=\"ngx-mic-recorder__toggle\" (click)=\"toggle()\">\r\n      <span [class.blink]=\"!isPaused\"></span>\r\n      <p>{{ recordingState }}</p>\r\n    </div>\r\n  </ng-template>\r\n</ng-template>\r\n", styles: ["ngx-mic-recorder{width:400px;display:block}ngx-mic-recorder>*{box-sizing:border-box}ngx-mic-recorder>canvas{width:100%}.ngx-mic-recorder{display:flex;align-items:center;justify-content:space-between}.ngx-mic-recorder__recording-time{color:#282828;font-size:24px;font-weight:700}.ngx-mic-recorder__state{width:24px;height:24px}.ngx-mic-recorder__start-stop{padding:16px;background-color:#282828;border-radius:50px;border:4px solid #CFCFCF;cursor:pointer}.ngx-mic-recorder__start-stop .ngx-mic-recorder__stop{background-color:#cfcfcf;border-radius:4px;width:100%;height:100%;display:block}.ngx-mic-recorder__start-stop .ngx-mic-recorder__start{color:#cfcfcf;width:100%;height:100%}.ngx-mic-recorder__toggle{padding:16px 48px;background-color:#282828;border-radius:50px;border:4px solid #CFCFCF;cursor:pointer;color:#cfcfcf;display:flex;align-items:center}.ngx-mic-recorder__toggle>span{background-color:#d40100;border-radius:50%;width:24px;height:24px;display:block;margin-inline-end:8px}.ngx-mic-recorder__toggle>p{margin:0;width:60px;text-transform:capitalize}.hidden{visibility:hidden}.blink{animation-name:blink;animation-duration:1s;animation-iteration-count:infinite}@keyframes blink{0%{opacity:1}50%{opacity:.3}to{opacity:1}}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.NgxMicRecorderService }]; }, propDecorators: { canvas: [{
                type: ViewChild,
                args: ['canvas']
            }], startStopTemplateRef: [{
                type: ContentChild,
                args: [NgxMicStartStopTemplate]
            }], pauseResumeTemplateRef: [{
                type: ContentChild,
                args: [NgxPauseResumeTemplate]
            }], showVisualization: [{
                type: Input
            }], visualizationType: [{
                type: Input
            }], visualizationOptions: [{
                type: Input
            }], getAsMp3: [{
                type: Output
            }], getAsBlob: [{
                type: Output
            }], afterStartRecording: [{
                type: Output
            }], afterStopRecording: [{
                type: Output
            }], onPauseRecording: [{
                type: Output
            }], onResumeRecording: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,