import { Injectable } from '@angular/core';
import { BehaviorSubject, from, map, switchMap } from 'rxjs';
import { MP3Encoder } from './utils/mp3-encoder';
import { AudioContext } from './utils/audio-context';
import * as i0 from "@angular/core";
export class NgxMicRecorderService {
    constructor() {
        this._isRecordingSubject = new BehaviorSubject(false);
        this._isPausedSubject = new BehaviorSubject(false);
        this._recordingTimeSubject = new BehaviorSubject(0);
        this._recordedBlobSubject = new BehaviorSubject(null);
        this._recordingStateSubject = new BehaviorSubject('inactive');
        this._audioContext = new (window.AudioContext || window['webkitAudioContext'])();
        this._mp3Encoder = new MP3Encoder();
        this.isRecording$ = this._isRecordingSubject.asObservable();
        this.isPaused$ = this._isPausedSubject.asObservable();
        this.recordingTime$ = this._recordingTimeSubject.asObservable().pipe(map(s => new Date(s * 1000).toISOString().slice(11, 19)));
        this.recordedBlob$ = this._recordedBlobSubject.asObservable();
        this.recordedBlobAsMp3$ = this.recordedBlob$.pipe(switchMap(() => from(this._getMp3())));
        this.recordingState$ = this._recordingStateSubject.asObservable();
        this.toggleStartStop = () => {
            const isRecording = this._isRecordingSubject.getValue();
            if (isRecording) {
                this.stopRecording();
            }
            else {
                this.startRecording();
            }
        };
        this.startRecording = () => {
            if (this._timeInterval !== undefined)
                return;
            navigator.mediaDevices
                .getUserMedia({ audio: true })
                .then((stream) => {
                this._activeStream = stream;
                this._isRecordingSubject.next(true);
                const recorder = new MediaRecorder(stream);
                this._mediaRecorder = recorder;
                recorder.start();
                this._startTimer();
                this._recordingStateSubject.next('recording');
                this._mic = this._audioContext.createMediaStreamSource(stream);
                this._processor = this._audioContext.createScriptProcessor(0, 1, 1);
                this._mic.connect(this._processor);
                this._processor.connect(this._audioContext.destination);
                this._processor.onaudioprocess = (event) => {
                    this._mp3Encoder.encode(event.inputBuffer.getChannelData(0));
                };
                if (this._recordingEvents?.afterStartRecording)
                    this._recordingEvents?.afterStartRecording();
                recorder.addEventListener('dataavailable', (event) => {
                    this._recordedBlobSubject.next(event.data);
                    // if (onDataAvailable) onDataAvailable(event.data);
                    recorder.stream.getTracks().forEach((t) => t.stop());
                    this._mediaRecorder = undefined;
                });
                AudioContext.startAnalyze(stream);
            })
                .catch((err) => console.log(err));
        };
        this.stopRecording = () => {
            this._mediaRecorder?.stop();
            this._stopTimer();
            this._recordingTimeSubject.next(0);
            this._isRecordingSubject.next(false);
            this._isPausedSubject.next(false);
            this._recordingStateSubject.next('inactive');
            AudioContext.resetAnalyser();
            if (this._recordingEvents?.afterStopRecording)
                this._recordingEvents.afterStopRecording(this._recordedBlobSubject.getValue());
            if (this._processor && this._mic) {
                this._mic.disconnect();
                this._processor.disconnect();
                if (this._audioContext && this._audioContext.state !== 'closed') {
                    this._audioContext.close();
                }
                this._processor.onaudioprocess = null;
                this._activeStream?.getAudioTracks().forEach((track) => track.stop());
            }
        };
        this.togglePauseAndResume = () => {
            const isRecording = this._isRecordingSubject.getValue();
            if (!isRecording)
                return;
            const isPaused = this._isPausedSubject.getValue();
            if (isPaused) {
                this.resume();
            }
            else {
                this.pause();
            }
        };
        this.resume = () => {
            this._isPausedSubject.next(false);
            this._mediaRecorder?.resume();
            this._recordingStateSubject.next('recording');
            AudioContext.resumeAnalyze();
            void this._audioContext.resume();
            this._startTimer();
            if (this._recordingEvents?.onResume)
                this._recordingEvents.onResume();
        };
        this.pause = () => {
            this._isPausedSubject.next(true);
            this._mediaRecorder?.pause();
            this._recordingStateSubject.next('paused');
            AudioContext.pauseAnalyze();
            void this._audioContext.suspend();
            this._stopTimer();
            if (this._recordingEvents?.onPause)
                this._recordingEvents.onPause();
        };
    }
    _startTimer() {
        this._timeInterval = setInterval(() => {
            this._recordingTimeSubject.next(this._recordingTimeSubject.getValue() + 1);
        }, 1000);
    }
    _stopTimer() {
        clearInterval(this._timeInterval);
        this._timeInterval = undefined;
    }
    _getMp3() {
        const finalBuffer = this._mp3Encoder.finish();
        return new Promise((resolve, reject) => {
            if (finalBuffer.length === 0) {
                reject(new Error('No buffer to send'));
            }
            else {
                resolve(new Blob(finalBuffer, { type: 'audio/mp3' }));
                this._mp3Encoder.clearBuffer();
            }
        });
    }
    setRecordingEvents(events) {
        this._recordingEvents = events;
    }
}
NgxMicRecorderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: NgxMicRecorderService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NgxMicRecorderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: NgxMicRecorderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: NgxMicRecorderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,